import{_ as s,c as e,o as a,a as l}from"./app.8b2cee4b.js";const d=JSON.parse('{"title":"工作区","description":"","frontmatter":{"title":"工作区"},"headers":[{"level":2,"title":"Splits","slug":"splits","link":"#splits","children":[]},{"level":2,"title":"检查工作区","slug":"检查工作区","link":"#检查工作区","children":[]},{"level":2,"title":"Leaf lifecycle","slug":"leaf-lifecycle","link":"#leaf-lifecycle","children":[]},{"level":2,"title":"Leaf 组","slug":"leaf-组","link":"#leaf-组","children":[]}],"relativePath":"zh2.0/user-interface/workspace.md","lastUpdated":1678205382000}'),n={name:"zh2.0/user-interface/workspace.md"},p=l(`<h1 id="工作区" tabindex="-1">工作区 <a class="header-anchor" href="#工作区" aria-hidden="true">#</a></h1><p>Obsidian 允许您配置在任何指定的时间对您可见的内容。当您不需要文件搜索的时候隐藏它、并列显示多个文档、或者在您编辑文档的时候显示文档大纲。关于应用内的可见内容配置窗口在 <em>workspace</em> 配置项中。</p><p>workspace 是<a href="https://en.wikipedia.org/wiki/Tree_(data_structure)" target="_blank" rel="noreferrer">树形结构</a>的, 树上的每一个节点都是一个 <a href="./../reference/typescript/classes/WorkspaceItem.html">工作区项</a>。 有两种类型的工作区项： <a href="./../reference/typescript/classes/WorkspaceParent.html"><em>父节点</em></a> and <a href="./../reference/typescript/classes/WorkspaceLeaf.html"><em>叶子节点</em></a>。 两者之间的主要区别在于 <em>parents</em> 可以包含 <em>leaves</em> 以及其他 <em>parents</em> ，而 <em>leaves</em> 不可以包含任何其他项。</p><p><em>parents</em> 也存在两种类型， <a href="./../reference/typescript/classes/WorkspaceSplit.html"><em>splits</em></a> 以及 <a href="./../reference/typescript/classes/WorkspaceTabs.html"><em>tabs</em></a>, 用来决定其中的子项如何呈现给用户:</p><img src="https://mermaid.ink/img/pako:eNp1j8EOgjAMhl9l6QkSeIEdTFS8eYODml0qG7LIGBkjxix7d4eKqAk9NO33f2lSB6XmAihUjb6VNRpLioy1JFTfNdK6fOz-i5A0XZF1FO0FVnH8H2yWgu0cvCKL594Vofl5f5qH3xMfflzgp4lDAkoYhZKHf9xoMbC1UIIBDSNHc2XAWh-8oeNoxY5Lqw3QCpteJICD1fm9LYFaM4hJyiReDKq35R9DHl05"><ul><li>split 沿垂直或水平方向依次排列其子项。</li><li>tabs 每次只显示一个子项。</li></ul><p>在 workspace 下面有三种特殊的 split: <em>left</em>, <em>right</em>, and <em>root</em> 。下图是典型的 workspace 示例：</p><img src="https://mermaid.ink/img/pako:eNp9kcFqwzAQRH9F7CmB5Ad8KKRxCm1zagK96LK11rGIbRlZJhThf69Wjt24DfFhWGaeRyvkITOKIIG8NJesQOvEMZW1CN-nsee2wYzEev0k9pQ7zyLaptSuv8d8GOM8yyNGn4oAsU7UwMVyRsowHPGr9SzXktGLwGax2BPmy-Wd7Pk3G9K4Dydbf7jZarLTvz9so72bnzGYL__K4z04sjzdbj0Akx2h13npPHx7FL6PIaygIluhVuHRPKMSXEEVSUjCqNCeJci6D1zXKHS0U9oZC0mOZUsrwM6Zw3edQeJsRyOUajxZrK5U_wPvVaWm"><p>leaf 是一个能以不同形式展示内容的窗口。leaf 的类型决定了内容该要如何展示，以及对应哪个具体的 <em>view</em>。举个例子，一个 <code>graph</code> 类型的 leaf 对应显示 <a href="https://help.obsidian.md/Plugins/Graph+view" target="_blank" rel="noreferrer">graph view</a>。</p><h2 id="splits" tabindex="-1">Splits <a class="header-anchor" href="#splits" aria-hidden="true">#</a></h2><p>默认情况下，root split 按照垂直方向排列。当您创建了一个新的 leaf，Obsidian 在用户界面中创建一个新列。当您拆分一个 leaf，被拆分出来的 leaves 会被添加到新的 split 中去。当没有限制 root split 的层级时，实际上每个层级的实用性会降低。</p><img src="https://mermaid.ink/img/pako:eNp9kE1vwjAMhv9K5FMrwQHYLj1MGoIbJ-Doi9c4o6JNkHGFUNX_vjQaQ-PLh9jx-9hvlA7KYBkKcHU4lTsSNdsFehNDQtA5uyDcIazjxRwPdaWIPvtK7RyhR38Lm_H4w9RMbpJlq5jy_CkxvRJX5tMpy50jDd1bw4SmbYnrNsPZP9IHt9n_96SRP_Htlfh-EWEEDUtDlY0_1g0ogu64YYQilpZkj4C-j1x7sKS8tJUGgcJRfeQRUKthc_YlFCotX6BFRd9CzS_V_wCEuYMl"><p>左右的 splits 的工作方式略有不同。当您拆分一个 leaf 到侧边栏，Obsidian 会生成一个新的 tabs，并将新的 leaf 插入到其中。事实上，这意味着它们在任何时候只能拥有三层的 workpace，并且直接子级必须是 tabs 。</p><img src="https://mermaid.ink/img/pako:eNp1kb1ugzAURl8F3QmkZMAkC0OnZMuUZvRyg6-DFcCRuaiqEO9eJ6TEKdSDf46OPn-WeyisIshBV_arKNFxdNrJJvKjvVWG017C0VxKHo9SNvGZtHWUSBhGj_Hcpv3Jz09QEeo0jg9-SZIXEi8UXhCt1x9jRhD3gI-cJSjeEsS8Imom995QhA3vIPtbOZtX3szRdvEVYnqFCK6cCmdLcPNPQiBnk7yFFdTkajTKf1Z_VyRwSTVJyP1WobtKkM3gve6mkGmvDFsHucaqpRVgx_bzuykgZ9fRr7QzeHFYP63hBwwdoww"><h2 id="检查工作区" tabindex="-1">检查工作区 <a class="header-anchor" href="#检查工作区" aria-hidden="true">#</a></h2><p>您可以通过 <a href="./../reference/typescript/classes/App.html">App</a> 对象访问工作区。下例中打印了在工作区中每个 leaf 的类型:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Plugin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obsidian</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExamplePlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">onload</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">addRibbonIcon</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Print leaf types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">workspace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iterateAllLeaves</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">leaf</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leaf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getViewState</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="leaf-lifecycle" tabindex="-1">Leaf lifecycle <a class="header-anchor" href="#leaf-lifecycle" aria-hidden="true">#</a></h2><p>插件可以向 workspace 中添加任意类型的 leaf，也可以通过 [自定义视图]<a href="./views.html">custom views</a>。以下是一些添加 leaf 到 workspace 的方式。想要了解更多，可以查阅 <a href="./../reference/typescript/classes/Workspace.html"><code>Workspace</code></a> 这篇文档。</p><ul><li>如果您想在根 split 中添加一个新的 leaf， 使用 <a href="./../reference/typescript/classes/Workspace.html#getleaf"><code>workspace.getLeaf(true)</code></a> 方法.</li><li>如果您想在侧边栏中添加任意一个新的 leaf，可以使用 <a href="./../reference/typescript/classes/Workspace.html#getleftleaf"><code>workspace.getLeftLeaf()</code></a> 以及 <a href="./../reference/typescript/classes/Workspace.html#getrightleaf"><code>workspace.getRightLeaf()</code></a>方法。两者都可以让您决定是否需要将 leaf 添加到新的 split 上。</li></ul><p>您也可以使用 <a href="./../reference/typescript/classes/Workspace.html#createleafinparent"><code>createLeafInParent()</code></a>方法在您选择的 split 中显式的添加 leaf。</p><p>除非明确删除，否则即使在插件被禁用后，插件添加到工作区上的任何 leaf 依旧会被保留。插件负责删除它们添加到 工作区的任何叶子节点。</p><p>要想从 workspace 中删除一个 leaf，在您想要删除的 leaf 上调用 <a href="./../reference/typescript/classes/WorkspaceLeaf.html#detach"><code>detach()</code></a>方法。您也可以通过使用 <a href="./../reference/typescript/classes/Workspace.html#detachleavesoftype"><code>detachLeavesOfType()</code></a>.</p><h2 id="leaf-组" tabindex="-1">Leaf 组 <a class="header-anchor" href="#leaf-组" aria-hidden="true">#</a></h2><p>您可以使用 <a href="https://help.obsidian.md/User+interface/Workspace/Panes/Linked+pane" target="_blank" rel="noreferrer">linked panes</a> 方法来分配多个 leaf 到同一个组中以创建 <a href="./../reference/typescript/classes/WorkspaceLeaf.html#setgroup"><code>setGroup()</code></a>.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">leaves</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">leaf</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> leaf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setGroup</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">group1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,26),o=[p];function t(r,c,i,y,F,h){return a(),e("div",null,o)}const f=s(n,[["render",t]]);export{d as __pageData,f as default};
