import{_ as s,c as e,o as a,a as n}from"./app.9658da38.js";const D=JSON.parse('{"title":"View plugins","description":"","frontmatter":{"title":"View plugins"},"headers":[{"level":2,"title":"Prerequisites","slug":"prerequisites"},{"level":2,"title":"Creating a view plugin","slug":"creating-a-view-plugin"},{"level":2,"title":"Next steps","slug":"next-steps"}],"relativePath":"zh2.0/editor/extensions/view-plugins.md","lastUpdated":1661324488000}'),l={name:"zh2.0/editor/extensions/view-plugins.md"},t=n(`<h1 id="view-plugins" tabindex="-1">View plugins <a class="header-anchor" href="#view-plugins" aria-hidden="true">#</a></h1><p>A view plugin is an <a href="./">editor extension</a> that gives you access to the editor <a href="./viewport.html">viewport</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This page aims to distill the official CodeMirror 6 documentation for Obsidian plugin developers. For more information on state management, refer to <a href="https://codemirror.net/docs/guide/#affecting-the-view" target="_blank" rel="noreferrer">Affecting the View</a>.</p></div><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a></h2><ul><li>Basic understanding of the <a href="./viewport.html">Viewport</a>.</li></ul><h2 id="creating-a-view-plugin" tabindex="-1">Creating a view plugin <a class="header-anchor" href="#creating-a-view-plugin" aria-hidden="true">#</a></h2><p>View plugins are editor extensions that run <em>after</em> the viewport has been recomputed. While this means that they can access the viewport, it also means that a view plugin can&#39;t make any changes that would impact the viewport. For example, by inserting blocks or line breaks into the document.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to make changes that impact the vertical layout of the editor, by for example inserting blocks and line breaks, you need to use a <a href="./state-fields.html">state field</a>.</p></div><p>To create a view plugin, create a class that implements <a href="https://codemirror.net/docs/ref/#view.PluginValue" target="_blank" rel="noreferrer">PluginValue</a> and pass it to the <a href="https://codemirror.net/docs/ref/#view.ViewPlugin%5EfromClass" target="_blank" rel="noreferrer">ViewPlugin.fromClass()</a> function.</p><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ViewUpdate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">PluginValue</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">EditorView</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ViewPlugin</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@codemirror/view</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExamplePlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PluginValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EditorView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">update</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ViewUpdate</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">destroy</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> examplePlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ViewPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromClass</span><span style="color:#A6ACCD;">(ExamplePlugin)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>The three methods of the view plugin control its lifecycle:</p><ul><li><code>constructor()</code> initializes the plugin.</li><li><code>update()</code> updates your plugin when something has changed, for example when the user entered or selected some text.</li><li><code>destroy()</code> cleans up after the plugin.</li></ul><p>While the view plugin in the example works, it doesn&#39;t do much. If you want to better understand what causes the plugin to update, you can add a <code>console.log(update);</code> line to the <code>update()</code> method to print all updates to the console.</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-hidden="true">#</a></h2><p>Provide <a href="./decorations.html">Decorations</a> from your view plugin to change how to display the document.</p>`,15),o=[t];function p(r,i,c,d,u,y){return a(),e("div",null,o)}const F=s(l,[["render",p]]);export{D as __pageData,F as default};
