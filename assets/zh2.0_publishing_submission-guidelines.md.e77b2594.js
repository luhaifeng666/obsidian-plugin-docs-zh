import{_ as s,c as e,o as a,a as n}from"./app.741f1ead.js";const m=JSON.parse('{"title":"Submission guidelines","description":"","frontmatter":{},"headers":[{"level":2,"title":"Use normalizePath() to clean up user-defined paths","slug":"use-normalizepath-to-clean-up-user-defined-paths"}],"relativePath":"zh2.0/publishing/submission-guidelines.md","lastUpdated":1661305878000}'),o={name:"zh2.0/publishing/submission-guidelines.md"},l=n(`<h1 id="submission-guidelines" tabindex="-1">Submission guidelines <a class="header-anchor" href="#submission-guidelines" aria-hidden="true">#</a></h1><p>This page lists common review comments plugin authors get when submitting their plugin.</p><h2 id="use-normalizepath-to-clean-up-user-defined-paths" tabindex="-1">Use <code>normalizePath()</code> to clean up user-defined paths <a class="header-anchor" href="#use-normalizepath-to-clean-up-user-defined-paths" aria-hidden="true">#</a></h2><p>Use <a href="./../reference/typescript/functions/normalizePath.html"><code>normalizePath()</code></a> whenever you accept user-defined paths to files or folders in the vault, or when you construct your own paths in the plugin code.</p><p><code>normalizePath()</code> takes a path and scrubs it to be safe for the file system and for cross-platform use. This function:</p><ul><li>Cleans up the use of forward and backward slashes, such as replacing 1 or more of <code>\\</code> or <code>/</code> with a single <code>/</code>.</li><li>Removes leading and trailing forward and backward slashes.</li><li>Replaces any non-breaking spaces, <code>\\u00A0</code>, with a regular space.</li><li>Runs the path through <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer">String.prototype.normalize</a>.</li></ul><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">normalizePath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obsidian</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pathToPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">normalizePath</span><span style="color:#A6ACCD;">(app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vault</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">configDir </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">//plugins/my-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">// pathToPlugin contains &quot;.obsidian/plugins/my-plugin&quot; not .obsidian//plugins/my-plugin</span></span>
<span class="line"></span></code></pre></div>`,7),t=[l];function p(i,r,c,u,d,h){return a(),e("div",null,t)}const y=s(o,[["render",p]]);export{m as __pageData,y as default};
