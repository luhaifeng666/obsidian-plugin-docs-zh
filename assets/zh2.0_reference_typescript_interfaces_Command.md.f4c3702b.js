import{_ as a,c as s,o as e,a as n}from"./app.f820da6b.js";const D=JSON.parse('{"title":"Command","description":"","frontmatter":{},"headers":[{"level":2,"title":"Properties","slug":"properties"},{"level":3,"title":"id","slug":"id"},{"level":3,"title":"name","slug":"name"},{"level":3,"title":"icon","slug":"icon"},{"level":3,"title":"mobileOnly","slug":"mobileonly"},{"level":3,"title":"repeatable","slug":"repeatable"},{"level":3,"title":"callback","slug":"callback"},{"level":3,"title":"checkCallback","slug":"checkcallback"},{"level":3,"title":"editorCallback","slug":"editorcallback"},{"level":3,"title":"editorCheckCallback","slug":"editorcheckcallback"},{"level":3,"title":"hotkeys","slug":"hotkeys"}],"relativePath":"zh2.0/reference/typescript/interfaces/Command.md","lastUpdated":1666535135000}'),l={name:"zh2.0/reference/typescript/interfaces/Command.md"},o=n(`<h1 id="command" tabindex="-1">Command <a class="header-anchor" href="#command" aria-hidden="true">#</a></h1><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><h3 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"></span></code></pre></div><p>Globally unique ID to identify this command.</p><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"></span></code></pre></div><p>Human friendly name for searching.</p><h3 id="icon" tabindex="-1">icon <a class="header-anchor" href="#icon" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">icon</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"></span></code></pre></div><p>Icon ID to be used in the toolbar.</p><h3 id="mobileonly" tabindex="-1">mobileOnly <a class="header-anchor" href="#mobileonly" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">mobileOnly</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> boolean</span></span>
<span class="line"></span></code></pre></div><h3 id="repeatable" tabindex="-1">repeatable <a class="header-anchor" href="#repeatable" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">repeatable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> boolean</span></span>
<span class="line"></span></code></pre></div><p>Whether holding the hotkey should repeatedly trigger this command. Defaults to false.</p><h3 id="callback" tabindex="-1">callback <a class="header-anchor" href="#callback" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span></span>
<span class="line"></span></code></pre></div><p>Simple callback, triggered globally.</p><h3 id="checkcallback" tabindex="-1">checkCallback <a class="header-anchor" href="#checkcallback" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">checkCallback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">checking</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> boolean </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span></span>
<span class="line"></span></code></pre></div><p>Complex callback, overrides the simple callback. Used to &quot;check&quot; whether your command can be performed in the current circumstances. For example, if your command requires the active focused pane to be a MarkdownSourceView, then you should only return true if the condition is satisfied. Returning false or undefined causes the command to be hidden from the command palette.</p><h3 id="editorcallback" tabindex="-1">editorCallback <a class="header-anchor" href="#editorcallback" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">editorCallback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">editor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MarkdownView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span></span>
<span class="line"></span></code></pre></div><p>A command callback that is only triggered when the user is in an editor. Overrides <code>callback</code> and <code>checkCallback</code></p><h3 id="editorcheckcallback" tabindex="-1">editorCheckCallback <a class="header-anchor" href="#editorcheckcallback" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">editorCheckCallback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">checking</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">editor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MarkdownView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> boolean </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span></span>
<span class="line"></span></code></pre></div><p>A command callback that is only triggered when the user is in an editor. Overrides <code>editorCallback</code>, <code>callback</code> and <code>checkCallback</code></p><h3 id="hotkeys" tabindex="-1">hotkeys <a class="header-anchor" href="#hotkeys" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">hotkeys</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Hotkey[]</span></span>
<span class="line"></span></code></pre></div><p>Sets the default hotkey. It is recommended for plugins to avoid setting default hotkeys if possible, to avoid conflicting hotkeys with one that&#39;s set by the user, even though customized hotkeys have higher priority.</p>`,31),c=[o];function t(p,r,i,d,h,y){return e(),s("div",null,c)}const b=a(l,[["render",t]]);export{D as __pageData,b as default};
