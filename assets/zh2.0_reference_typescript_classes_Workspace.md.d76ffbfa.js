import{_ as e,c as a,o as s,a as n}from"./app.81c6d9a5.js";const u=JSON.parse('{"title":"Workspace","description":"","frontmatter":{},"headers":[{"level":2,"title":"Constructor","slug":"constructor"},{"level":2,"title":"Properties","slug":"properties"},{"level":3,"title":"leftSplit","slug":"leftsplit"},{"level":3,"title":"rightSplit","slug":"rightsplit"},{"level":3,"title":"leftRibbon","slug":"leftribbon"},{"level":3,"title":"rightRibbon","slug":"rightribbon"},{"level":3,"title":"rootSplit","slug":"rootsplit"},{"level":3,"title":"activeLeaf","slug":"activeleaf"},{"level":3,"title":"containerEl","slug":"containerel"},{"level":3,"title":"layoutReady","slug":"layoutready"},{"level":3,"title":"requestSaveLayout","slug":"requestsavelayout"},{"level":3,"title":"requestSaveHistory","slug":"requestsavehistory"},{"level":2,"title":"Methods","slug":"methods"},{"level":3,"title":"onLayoutReady","slug":"onlayoutready"},{"level":3,"title":"changeLayout","slug":"changelayout"},{"level":3,"title":"getLayout","slug":"getlayout"},{"level":3,"title":"createLeafInParent","slug":"createleafinparent"},{"level":3,"title":"splitLeaf","slug":"splitleaf"},{"level":3,"title":"createLeafBySplit","slug":"createleafbysplit"},{"level":3,"title":"splitActiveLeaf","slug":"splitactiveleaf"},{"level":3,"title":"duplicateLeaf","slug":"duplicateleaf"},{"level":3,"title":"getUnpinnedLeaf","slug":"getunpinnedleaf"},{"level":3,"title":"getLeaf","slug":"getleaf"},{"level":3,"title":"moveLeafToPopout","slug":"moveleaftopopout"},{"level":3,"title":"openPopoutLeaf","slug":"openpopoutleaf"},{"level":3,"title":"openLinkText","slug":"openlinktext"},{"level":3,"title":"setActiveLeaf","slug":"setactiveleaf"},{"level":3,"title":"getLeafById","slug":"getleafbyid"},{"level":3,"title":"getGroupLeaves","slug":"getgroupleaves"},{"level":3,"title":"getMostRecentLeaf","slug":"getmostrecentleaf"},{"level":3,"title":"getLeftLeaf","slug":"getleftleaf"},{"level":3,"title":"getRightLeaf","slug":"getrightleaf"},{"level":3,"title":"getActiveViewOfType","slug":"getactiveviewoftype"},{"level":3,"title":"getActiveFile","slug":"getactivefile"},{"level":3,"title":"iterateRootLeaves","slug":"iteraterootleaves"},{"level":3,"title":"iterateAllLeaves","slug":"iterateallleaves"},{"level":3,"title":"getLeavesOfType","slug":"getleavesoftype"},{"level":3,"title":"detachLeavesOfType","slug":"detachleavesoftype"},{"level":3,"title":"revealLeaf","slug":"revealleaf"},{"level":3,"title":"getLastOpenFiles","slug":"getlastopenfiles"},{"level":3,"title":"updateOptions","slug":"updateoptions"},{"level":3,"title":"iterateCodeMirrors","slug":"iteratecodemirrors"},{"level":3,"title":"on","slug":"on"},{"level":3,"title":"on","slug":"on-1"},{"level":3,"title":"on","slug":"on-2"},{"level":3,"title":"on","slug":"on-3"},{"level":3,"title":"on","slug":"on-4"},{"level":3,"title":"on","slug":"on-5"},{"level":3,"title":"on","slug":"on-6"},{"level":3,"title":"on","slug":"on-7"},{"level":3,"title":"on","slug":"on-8"},{"level":3,"title":"on","slug":"on-9"},{"level":3,"title":"on","slug":"on-10"},{"level":3,"title":"on","slug":"on-11"},{"level":3,"title":"on","slug":"on-12"},{"level":3,"title":"on","slug":"on-13"},{"level":3,"title":"on","slug":"on-14"},{"level":3,"title":"on","slug":"on-15"}],"relativePath":"zh2.0/reference/typescript/classes/Workspace.md","lastUpdated":1665539850000}'),t={name:"zh2.0/reference/typescript/classes/Workspace.md"},o=n(`<h1 id="workspace" tabindex="-1">Workspace <a class="header-anchor" href="#workspace" aria-hidden="true">#</a></h1><p>Extends <code>Events</code></p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h2><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><h3 id="leftsplit" tabindex="-1">leftSplit <a class="header-anchor" href="#leftsplit" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">leftSplit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> WorkspaceSidedock </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> WorkspaceMobileDrawer</span></span>
<span class="line"></span></code></pre></div><h3 id="rightsplit" tabindex="-1">rightSplit <a class="header-anchor" href="#rightsplit" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">rightSplit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> WorkspaceSidedock </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> WorkspaceMobileDrawer</span></span>
<span class="line"></span></code></pre></div><h3 id="leftribbon" tabindex="-1">leftRibbon <a class="header-anchor" href="#leftribbon" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">leftRibbon</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> WorkspaceRibbon</span></span>
<span class="line"></span></code></pre></div><h3 id="rightribbon" tabindex="-1">rightRibbon <a class="header-anchor" href="#rightribbon" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">rightRibbon</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> WorkspaceRibbon</span></span>
<span class="line"></span></code></pre></div><h3 id="rootsplit" tabindex="-1">rootSplit <a class="header-anchor" href="#rootsplit" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">rootSplit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> WorkspaceRoot</span></span>
<span class="line"></span></code></pre></div><h3 id="activeleaf" tabindex="-1">activeLeaf <a class="header-anchor" href="#activeleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">activeLeaf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> WorkspaceLeaf</span></span>
<span class="line"></span></code></pre></div><p>Indicates the currently focused leaf, if one exists.</p><p>Please avoid using <code>activeLeaf</code> directly, especially without checking whether <code>activeLeaf</code> is null.</p><p>The recommended alternatives are:</p><ul><li>If you need information about the current view, use {@link getActiveViewOfType}.</li><li>If you need to open a new file or navigate a view, use {@link getLeaf}.</li></ul><h3 id="containerel" tabindex="-1">containerEl <a class="header-anchor" href="#containerel" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">containerEl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> HTMLElement</span></span>
<span class="line"></span></code></pre></div><h3 id="layoutready" tabindex="-1">layoutReady <a class="header-anchor" href="#layoutready" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">layoutReady</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> boolean</span></span>
<span class="line"></span></code></pre></div><h3 id="requestsavelayout" tabindex="-1">requestSaveLayout <a class="header-anchor" href="#requestsavelayout" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">requestSaveLayout</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span></span>
<span class="line"></span></code></pre></div><h3 id="requestsavehistory" tabindex="-1">requestSaveHistory <a class="header-anchor" href="#requestsavehistory" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#FFCB6B;">requestSaveHistory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span></span>
<span class="line"></span></code></pre></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="onlayoutready" tabindex="-1">onLayoutReady <a class="header-anchor" href="#onlayoutready" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">onLayoutReady</span><span style="color:#A6ACCD;">(callback: </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><p>Runs the callback function right away if layout is already ready, or push it to a queue to be called later when layout is ready.</p><h3 id="changelayout" tabindex="-1">changeLayout <a class="header-anchor" href="#changelayout" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">changeLayout</span><span style="color:#A6ACCD;">(workspace: any): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;;</span></span>
<span class="line"></span></code></pre></div><h3 id="getlayout" tabindex="-1">getLayout <a class="header-anchor" href="#getlayout" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getLayout</span><span style="color:#A6ACCD;">(): any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="createleafinparent" tabindex="-1">createLeafInParent <a class="header-anchor" href="#createleafinparent" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">createLeafInParent</span><span style="color:#A6ACCD;">(parent: WorkspaceSplit</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index: number): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="splitleaf" tabindex="-1">splitLeaf <a class="header-anchor" href="#splitleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">splitLeaf</span><span style="color:#A6ACCD;">(source: WorkspaceItem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> newLeaf: WorkspaceItem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> SplitDirection</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> before</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><h3 id="createleafbysplit" tabindex="-1">createLeafBySplit <a class="header-anchor" href="#createleafbysplit" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">createLeafBySplit</span><span style="color:#A6ACCD;">(leaf: WorkspaceLeaf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> SplitDirection</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> before</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="splitactiveleaf" tabindex="-1">splitActiveLeaf <a class="header-anchor" href="#splitactiveleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">splitActiveLeaf</span><span style="color:#A6ACCD;">(direction</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> SplitDirection): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="duplicateleaf" tabindex="-1">duplicateLeaf <a class="header-anchor" href="#duplicateleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">duplicateLeaf</span><span style="color:#A6ACCD;">(leaf: WorkspaceLeaf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> SplitDirection): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">WorkspaceLeaf</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span></code></pre></div><h3 id="getunpinnedleaf" tabindex="-1">getUnpinnedLeaf <a class="header-anchor" href="#getunpinnedleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getUnpinnedLeaf</span><span style="color:#A6ACCD;">(type</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> string): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getleaf" tabindex="-1">getLeaf <a class="header-anchor" href="#getleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getLeaf</span><span style="color:#A6ACCD;">(newLeaf</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> SplitDirection): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Returns a leaf that can be used for navigation.</p><p>If newLeaf is true, then a new leaf will be created in a preferred location within the root split and returned.</p><p>If newLeaf is false (or not set), then an existing leaf which can be navigated will be returned, or a new leaf will be created if there was no leaf available.</p><h3 id="moveleaftopopout" tabindex="-1">moveLeafToPopout <a class="header-anchor" href="#moveleaftopopout" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">moveLeafToPopout</span><span style="color:#A6ACCD;">(leaf: WorkspaceLeaf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> WorkspaceWindowInitData): WorkspaceWindow</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Migrates this leaf to a new popout window. Only works on the desktop app.</p><h3 id="openpopoutleaf" tabindex="-1">openPopoutLeaf <a class="header-anchor" href="#openpopoutleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">openPopoutLeaf</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> WorkspaceWindowInitData): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Open a new popout window with a single new leaf and return that leaf. Only works on the desktop app.</p><h3 id="openlinktext" tabindex="-1">openLinkText <a class="header-anchor" href="#openlinktext" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">openLinkText</span><span style="color:#A6ACCD;">(linktext: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sourcePath: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> newLeaf</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> openViewState</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> OpenViewState): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;;</span></span>
<span class="line"></span></code></pre></div><h3 id="setactiveleaf" tabindex="-1">setActiveLeaf <a class="header-anchor" href="#setactiveleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">setActiveLeaf</span><span style="color:#A6ACCD;">(leaf: WorkspaceLeaf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pushHistory</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> focus</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><p>Sets the active leaf</p><h3 id="getleafbyid" tabindex="-1">getLeafById <a class="header-anchor" href="#getleafbyid" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getLeafById</span><span style="color:#A6ACCD;">(id: string): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getgroupleaves" tabindex="-1">getGroupLeaves <a class="header-anchor" href="#getgroupleaves" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getGroupLeaves</span><span style="color:#A6ACCD;">(group: string): WorkspaceLeaf[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getmostrecentleaf" tabindex="-1">getMostRecentLeaf <a class="header-anchor" href="#getmostrecentleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getMostRecentLeaf</span><span style="color:#A6ACCD;">(root</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> WorkspaceParent): WorkspaceLeaf </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre></div><h3 id="getleftleaf" tabindex="-1">getLeftLeaf <a class="header-anchor" href="#getleftleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getLeftLeaf</span><span style="color:#A6ACCD;">(split: boolean): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getrightleaf" tabindex="-1">getRightLeaf <a class="header-anchor" href="#getrightleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getRightLeaf</span><span style="color:#A6ACCD;">(split: boolean): WorkspaceLeaf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getactiveviewoftype" tabindex="-1">getActiveViewOfType <a class="header-anchor" href="#getactiveviewoftype" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#A6ACCD;">getActiveViewOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">View</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Constructor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getactivefile" tabindex="-1">getActiveFile <a class="header-anchor" href="#getactivefile" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getActiveFile</span><span style="color:#A6ACCD;">(): TFile </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre></div><p>Returns the file for the current view if it&#39;s a FileView.</p><p>Otherwise, it will recent the most recently active file.</p><h3 id="iteraterootleaves" tabindex="-1">iterateRootLeaves <a class="header-anchor" href="#iteraterootleaves" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">iterateRootLeaves</span><span style="color:#A6ACCD;">(callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">leaf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkspaceLeaf</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><p>Iterate through all leaves in the main area of the workspace.</p><h3 id="iterateallleaves" tabindex="-1">iterateAllLeaves <a class="header-anchor" href="#iterateallleaves" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">iterateAllLeaves</span><span style="color:#A6ACCD;">(callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">leaf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkspaceLeaf</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><p>Iterate through all leaves, including main area leaves, floating leaves, and sidebar leaves.</p><h3 id="getleavesoftype" tabindex="-1">getLeavesOfType <a class="header-anchor" href="#getleavesoftype" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getLeavesOfType</span><span style="color:#A6ACCD;">(viewType: string): WorkspaceLeaf[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="detachleavesoftype" tabindex="-1">detachLeavesOfType <a class="header-anchor" href="#detachleavesoftype" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">detachLeavesOfType</span><span style="color:#A6ACCD;">(viewType: string): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><h3 id="revealleaf" tabindex="-1">revealLeaf <a class="header-anchor" href="#revealleaf" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">revealLeaf</span><span style="color:#A6ACCD;">(leaf: WorkspaceLeaf): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><h3 id="getlastopenfiles" tabindex="-1">getLastOpenFiles <a class="header-anchor" href="#getlastopenfiles" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">getLastOpenFiles</span><span style="color:#A6ACCD;">(): string[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="updateoptions" tabindex="-1">updateOptions <a class="header-anchor" href="#updateoptions" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">updateOptions</span><span style="color:#A6ACCD;">(): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><p>Calling this function will update/reconfigure the options of all markdown panes. It is fairly expensive, so it should not be called frequently.</p><h3 id="iteratecodemirrors" tabindex="-1">iterateCodeMirrors <a class="header-anchor" href="#iteratecodemirrors" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">iterateCodeMirrors</span><span style="color:#A6ACCD;">(callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CodeMirror</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><h3 id="on" tabindex="-1">on <a class="header-anchor" href="#on" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">quick-preview</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TFile</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-1" tabindex="-1">on <a class="header-anchor" href="#on-1" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">resize</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-2" tabindex="-1">on <a class="header-anchor" href="#on-2" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evt</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MouseEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-3" tabindex="-1">on <a class="header-anchor" href="#on-3" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">active-leaf-change</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">leaf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkspaceLeaf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-4" tabindex="-1">on <a class="header-anchor" href="#on-4" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file-open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TFile</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-5" tabindex="-1">on <a class="header-anchor" href="#on-5" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">layout-change</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-6" tabindex="-1">on <a class="header-anchor" href="#on-6" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">window-open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkspaceWindow</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Window</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-7" tabindex="-1">on <a class="header-anchor" href="#on-7" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">window-close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkspaceWindow</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Window</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-8" tabindex="-1">on <a class="header-anchor" href="#on-8" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css-change</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-9" tabindex="-1">on <a class="header-anchor" href="#on-9" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file-menu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">menu</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Menu</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TAbstractFile</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">leaf</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkspaceLeaf</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-10" tabindex="-1">on <a class="header-anchor" href="#on-10" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">editor-menu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">menu</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Menu</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">editor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MarkdownView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-11" tabindex="-1">on <a class="header-anchor" href="#on-11" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">editor-change</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">editor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">markdownView</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MarkdownView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-12" tabindex="-1">on <a class="header-anchor" href="#on-12" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">editor-paste</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evt</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ClipboardEvent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">editor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">markdownView</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MarkdownView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-13" tabindex="-1">on <a class="header-anchor" href="#on-13" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">editor-drop</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evt</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DragEvent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">editor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">markdownView</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MarkdownView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-14" tabindex="-1">on <a class="header-anchor" href="#on-14" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">codemirror</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CodeMirror</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Editor</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p><h3 id="on-15" tabindex="-1">on <a class="header-anchor" href="#on-15" aria-hidden="true">#</a></h3><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">quit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tasks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Tasks</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any): EventRef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Triggered when the CSS of the app has changed. Triggered when the user opens the context menu on a file. Triggered when the user opens the context menu on an editor. Triggered when changes to an editor has been applied, either programmatically or from a user event. Triggered when the editor receives a paste event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the editor receives a drop event. Check for <code>evt.defaultPrevented</code> before attempting to handle this event, and return if it has been already handled. Use <code>evt.preventDefault()</code> to indicate that you&#39;ve handled the event. Triggered when the app is about to quit. Not guaranteed to actually run. Perform some best effort cleanup here.</p>`,148),l=[o];function p(r,c,i,d,h,y){return s(),a("div",null,l)}const F=e(t,[["render",p]]);export{u as __pageData,F as default};
