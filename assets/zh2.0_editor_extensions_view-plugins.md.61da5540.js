import{_ as s,c as n,o as a,a as l}from"./app.929be4a4.js";const u=JSON.parse('{"title":"视图插件","description":"","frontmatter":{"title":"视图插件"},"headers":[{"level":2,"title":"前置准备","slug":"前置准备","link":"#前置准备","children":[]},{"level":2,"title":"创建一个视图插件","slug":"创建一个视图插件","link":"#创建一个视图插件","children":[]},{"level":2,"title":"下一步","slug":"下一步","link":"#下一步","children":[]}],"relativePath":"zh2.0/editor/extensions/view-plugins.md","lastUpdated":1678152993000}'),e={name:"zh2.0/editor/extensions/view-plugins.md"},p=l(`<h1 id="视图插件" tabindex="-1">视图插件 <a class="header-anchor" href="#视图插件" aria-hidden="true">#</a></h1><p>视图插件是一个可以让您访问编辑器<a href="./viewport.html">视窗</a>的<a href="./">编辑器扩展</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本页旨在为 Obsidian 插件开发者们精炼 CodeMirror 6 的官方文档。要想获取更多关于状态管理的详细信息，请查阅 <a href="https://codemirror.net/docs/guide/#affecting-the-view" target="_blank" rel="noreferrer">Affecting the View</a> 这篇文档。</p></div><h2 id="前置准备" tabindex="-1">前置准备 <a class="header-anchor" href="#前置准备" aria-hidden="true">#</a></h2><ul><li>对<a href="./viewport.html">视窗</a>有基本了解。</li></ul><h2 id="创建一个视图插件" tabindex="-1">创建一个视图插件 <a class="header-anchor" href="#创建一个视图插件" aria-hidden="true">#</a></h2><p>视图插件是在视窗被重新计算 <strong>后</strong> 执行的编辑器扩展。这意味着它们可以访问视窗，这也意味着视图插件不能对视窗做出任何有巨大影响的改动。比如在文档中插入块或者换行符。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您想做出影响编辑器垂直布局的变动，比如插入块或者换行符，您需要使用<a href="./state-fields.html">状态字段</a>。</p></div><p>要想创建一个视图插件，需要创建一个继承自 <a href="https://codemirror.net/docs/ref/#view.PluginValue" target="_blank" rel="noreferrer">PluginValue</a> 的类，并将它传给 <a href="https://codemirror.net/docs/ref/#view.ViewPlugin%5EfromClass" target="_blank" rel="noreferrer">ViewPlugin.fromClass()</a> 方法。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ViewUpdate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">PluginValue</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">EditorView</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ViewPlugin</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@codemirror/view</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExamplePlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PluginValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EditorView</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">update</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ViewUpdate</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">destroy</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> examplePlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ViewPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromClass</span><span style="color:#A6ACCD;">(ExamplePlugin)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>以下三个视图插件的方法控制它的生命周期：</p><ul><li><code>constructor()</code> 方法用于插件的初始化。</li><li><code>update()</code> 方法在发生改变时更新您的插件，比如在用户输入或者选择一些文本时。</li><li><code>destroy()</code> 方法在插件卸载后进行清理操作。</li></ul><p>虽然例子中的视图插件生效了，但是它做的事情并不多。如果您想更好地理解导致插件更新的原因，您可以在 <code>update()</code> 方法中添加 <code>console.log(update);</code> 这行代码以在控制台中打印所有的更新内容。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-hidden="true">#</a></h2><p>从您的视图插件中提供<a href="./decorations.html">装饰</a>以更改文档的显示方式。</p>`,15),o=[p];function r(t,c,i,D,y,d){return a(),n("div",null,o)}const C=s(e,[["render",r]]);export{u as __pageData,C as default};
